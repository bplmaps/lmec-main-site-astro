---
import Layout from '../../layouts/Layout.astro';
import { createSlug } from '../../lib/utils';
import Card from "../../components/Article/Card.astro";
import Pagination from "../../components/Pagination.astro";
import { useStoryblokApi } from "@storyblok/astro";
import type { Tag, PageData } from '../../lib/types';
import type { ISbResult } from '@storyblok/astro';
import type { GetStaticPathsOptions } from 'astro';

export async function getStaticPaths({ paginate }: GetStaticPathsOptions) {
  const storyblokApi = useStoryblokApi();

  let allArticles = [];

  let page = 1;
  const perPage = 100;

  while (true) {
    const { data } = await storyblokApi.get('cdn/stories', {
      version: String(import.meta.env.STORYBLOK_IS_PREVIEW) == 'true' ? 'draft' : 'published',
      starts_with: 'main-site/',
      content_type: 'article-page',
      per_page: perPage,
      page: page,
    })
    let events = data.stories
    events = Object.values(events)

    if (events.length === 0) {
      break; // Exit the loop if no stories are returned (i.e., last page)
    }

    allArticles.push(...events);
    page++;
  }

  allArticles = Object.values(allArticles)
  allArticles = allArticles.map((article: any) => {
    return {
      params: {
        title: article.content.title,
        description: article.content.description,
        slug: article.slug,
        headerImage: article.content.headerImage,
        publishedAt: article.content.publishDate,
        author: article.content.author,
        contentType: article.content.component,
      },
    }
  })

  return paginate(allArticles, {
    pageSize: 10
  });
}

const { page }: { page: PageData } = Astro.props;

const storyblokApi = useStoryblokApi();

const articlesPerPage = 10;
const articlesResponse: ISbResult = await storyblokApi.get('cdn/stories', {
  version: String(import.meta.env.STORYBLOK_IS_PREVIEW) == 'true' ? 'draft' : 'published',
  per_page: articlesPerPage,
  page: page.currentPage,
  starts_with: 'main-site/',
  content_type: 'article-page',
});
const totalArticles = Number(articlesResponse.total);
const totalPages = Math.ceil(totalArticles / articlesPerPage);

const currentPage = page.currentPage ?? 1;
const articles = page.data ?? [];

const tagsResponse = await storyblokApi.get('cdn/tags', {
  version: String(import.meta.env.STORYBLOK_IS_PREVIEW) == 'true' ? 'draft' : 'published',
  starts_with: 'main-site/',
})

let tags = tagsResponse.data.tags
tags = tags.sort(
  ({taggings_count: a}: Tag, {taggings_count: b}: Tag) => b - a
);
tags = tags.slice(0, 20);
---

<Layout title="Articles" description="Articles and posts that explore and explain our collections and initiatives" subheading="Articles and posts that explore and explain our collections and initiatives" pill="Article">
  <section class="section">
    <div class="row">
      <div class="col-12 order-2 order-lg-1">
        <div class="row">
          <h3>Filter articles by tag</h3>
          <div class="tagcloud">
            {tags.map((tag: any) => (
              <span class="badge rounded-pill bg-light text-secondary mb-1 tagcloud-item">
                <a href={`/tags/${createSlug(tag.name)}`}>{tag.name}</a>
                <span class="badge bg-info" >{tag.taggings_count}</span>
              </span>
            ))}
          </div>
        </div>
        <hr>
        <div class="row">
          {articles.map((article: any) => (
            <article class="col-sm-6 mb-5">
              <Card href={`/articles/${article.params.slug}`} thumbnail={article.params.headerImage} title={article.params.title} description={article.params.description} date={article.params.publishedAt} author={article.params.author} />
            </article>
          ))}
          <div class="col-12 mt-4">
            <Pagination urlBase="/articles" maxPagesToShow={5} currentPage={currentPage} totalPages={totalPages} />
          </div>
        </div>
      </div>
    </div>
  </section>
</Layout>
