---
import { useStoryblokApi } from "@storyblok/astro";

export interface Props {
  path: string;
}

interface Page {
  params: {
    name: string;
    path: string;
    hide_from_menu: boolean;
    is_startpage: boolean;
  };
}

const { path } = Astro.props
const currentPath = Astro.url.pathname.replace(/\/$/, '');

const folders = path.split('/');

let folder = folders[0];

if (folders.length > 1) {
  folder = folders[folders.length - 2];
}

const storyblokApi = useStoryblokApi()
let allPages = [];

let page = 1;
const perPage = 100;

while (true) {
  const { data } = await storyblokApi.get('cdn/stories', {
    version: String(import.meta.env.STORYBLOK_IS_PREVIEW) == 'true' ? 'draft' : 'published',
    starts_with: `main-site/${folder}/`,
    content_type: 'standard-lmec-main-page',
    per_page: perPage,
    page: page,
  })
  let pages = data.stories
  pages = Object.values(pages)

  if (pages.length === 0) {
    break; // Exit the loop if no stories are returned (i.e., last page)
  }

  allPages.push(...pages);
  page++;
}

allPages = allPages.map((page: any) => {
  return {
    params: {
      name: page.name,
      path: `/${page.full_slug.replace(/^main-site\//, '').replace(/\/$/, '')}`,
      hide_from_menu: page.content.hide_from_menu,
      is_startpage: page.is_startpage,
    },
  }
})
let startpages = allPages.filter((page: Page) => {
  return page.params.is_startpage;
})
allPages = allPages.filter((page: Page) => {
  return !page.params.is_startpage;
})
---
{allPages &&
  <div class="bg-white mb-5">
    {startpages.length > 0 &&
      <h5 class="mb-3 section-toplevel-link">
        <a href={startpages[0].params.path}>{startpages[0].params.name}</a>
      </h5>
    }
    <ul class="font-secondary text-secondary m-0 p-0">
      {allPages.map((page: Page) => (
        <li class="mb-2">
          {currentPath == page.params.path &&
            <i class="fas fa-arrow-right me-1"></i>
          }
          <a href={page.params.path}>{page.params.name}</a>
        </li>
      ))}
    </ul>
  </div>
}
