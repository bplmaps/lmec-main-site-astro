---
import { storyblokEditable } from '@storyblok/astro';
import { RichTextSchema, renderRichText } from '@storyblok/js';
import AlertBox from './nestable/AlertBox.astro';
import Button from './nestable/Button.astro';
import Carousel from './nestable/Carousel.astro';
import CartographyChallenges from './nestable/CartographyChallenges.astro';
import UnionSearch from './nestable/UnionSearch.astro';
import EducationListing from './nestable/EducationListing.astro';
import EventTagListing from './nestable/EventTagListing.astro';
import ExhibitionEvents from './nestable/ExhibitionEvents.astro';
import Figure from './nestable/Figure.astro';
import GrantsInAid from './nestable/GrantsInAid.astro';
import HoursTable from './nestable/HoursTable.astro';
import HtmlBlock from './nestable/HtmlBlock.astro';
import MaplibreGlMap from './nestable/MaplibreGlMap.astro';
import ResourcesList from './nestable/ResourcesList.astro';
import SmallGrants from './nestable/SmallGrants.astro';
import StaffList from './nestable/StaffList.astro';

export interface Props {
  blok: {
    body: any;
  };
}

const { blok } = Astro.props;

const richTextNodes = blok.body?.content || [];
const textOnlyNodes: any[] = [];
const storedComponents: { index: number; params: any; }[] = [];

richTextNodes.forEach((node: { type: string; attrs: { body: any[]; }; }, nodeIndex: any) => {
  if (node.type === 'blok') {
    node.attrs.body.forEach((component: any, componentIndex: any) => {
      const index = parseInt(`${nodeIndex}${componentIndex}`);
      // adds a placeholder for the component
      textOnlyNodes.push({
        ...component,
        content: [{ type: 'text', text: `[__COMPONENT:__INDEX:${index}]` }]
      });
      // stores the component for later replacement
      storedComponents.push({
        index,
        params: component
      });
    });
  } else {
    textOnlyNodes.push(node);
  }
});

const textBlok = {
  ...blok.body,
  content: textOnlyNodes
};

const richTextString = renderRichText(textBlok, {
  schema: RichTextSchema,
}) ?? '';

const richTextParts = richTextString.split(/\[__COMPONENT:(__INDEX:\d+)\]/);
---

<div {...storyblokEditable(blok)}>
  {richTextParts.map((part, index) => {
    if (part.startsWith('__INDEX:')) {
      const componentIndex = parseInt(part.replace('__INDEX:', ''));
      const storedComponent = storedComponents.find(comp => comp.index === componentIndex);
    
      if (storedComponent) {
        switch(storedComponent.params.component) {
          case 'alert-box':
            return <AlertBox blok={storedComponent.params} />;
          case 'button':
            return <Button blok={storedComponent.params} />;
          case 'carousel':
            return <Carousel blok={storedComponent.params} />;
          case 'cartography-challenges':
            return <CartographyChallenges blok={storedComponent.params} />;
          case 'digital-collections-union-search':
            return <UnionSearch blok={storedComponent.params} />;
          case 'education-listing':
            return <EducationListing blok={storedComponent.params} />;
          case 'event-tag-listing':
            return <EventTagListing blok={storedComponent.params} />;
          case 'exhibition-events':
            return <ExhibitionEvents blok={storedComponent.params} />;
          case 'figure':
            return <Figure blok={storedComponent.params} />;
          case 'grants-in-aid':
            return <GrantsInAid blok={storedComponent.params} />;
          case 'hours-table':
            return <HoursTable blok={storedComponent.params} />;
          case 'html-block':
            return <HtmlBlock blok={storedComponent.params} />;
          case 'maplibre-gl-map':
            return <MaplibreGlMap blok={storedComponent.params} />;
          case 'resources-list':
            return <ResourcesList blok={storedComponent.params} />;
          case 'small-grants':
            return <SmallGrants blok={storedComponent.params} />;
          case 'staff-list':
            return <StaffList blok={storedComponent.params} />;
          default:
            return `<!-- Component not found: ${storedComponent.params.component} -->`;
        }
      }
    }

    return <Fragment set:html={part} />;
  })}
</div>
