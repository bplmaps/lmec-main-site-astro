---
import { storyblokEditable } from '@storyblok/astro';
import { RichTextSchema, renderRichText } from '@storyblok/js';
import UnionSearch from './nestable/UnionSearch.astro';
import Button from './nestable/Button.astro';

export interface Props {
  blok: {
    body: any;
  };
}

const { blok } = Astro.props;

const richTextNodes = blok.body?.content || [];
const textOnlyNodes: any[] = [];
const storedComponents: { index: number; params: any; }[] = [];

richTextNodes.forEach((node: { type: string; attrs: { body: any[]; }; }, nodeIndex: any) => {
  if (node.type === 'blok') {
    node.attrs.body.forEach((component: any, componentIndex: any) => {
      const index = parseInt(`${nodeIndex}${componentIndex}`);
      // adds a placeholder for the component
      textOnlyNodes.push({
        ...component,
        type: 'paragraph',
        content: [{ type: 'text', text: `[__COMPONENT:__INDEX:${index}]` }]
      });
      // stores the component for later replacement
      storedComponents.push({
        index,
        params: component
      });
    });
  } else {
    textOnlyNodes.push(node);
  }
});

const textBlok = {
  ...blok.body,
  content: textOnlyNodes
};

const richTextString = renderRichText(textBlok, {
  schema: RichTextSchema,
}) ?? '';

const richTextParts = richTextString.split(/\[__COMPONENT:(__INDEX:\d+)\]/);
---

<div {...storyblokEditable(blok)}>
  {richTextParts.map((part, index) => {
    if (part.startsWith('__INDEX:')) {
      const componentIndex = parseInt(part.replace('__INDEX:', ''));
      const storedComponent = storedComponents.find(comp => comp.index === componentIndex);
    
      if (storedComponent) {
        switch(storedComponent.params.component) {
          case 'html-block':
            return <Fragment set:html={storedComponent.params.rawHTML} />;
          case 'digital-collections-union-search':
            return (
              <div {...storyblokEditable(storedComponent.params)}>
                <UnionSearch blok={storedComponent.params} />
              </div>
            );
          case 'button':
            return (
              <div {...storyblokEditable(storedComponent.params)}>
                <Button blok={storedComponent.params} />
              </div>
            );
          default:
            return `<!-- Component not found: ${storedComponent.params.component} -->`;
        }
      }
    }

    return <Fragment set:html={part} />;
  })}
</div>
